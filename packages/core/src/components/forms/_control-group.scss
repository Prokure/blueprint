// Copyright 2016 Palantir Technologies, Inc. All rights reserved.
// Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy
// of the license at https://github.com/palantir/blueprint/blob/master/LICENSE
// and https://github.com/palantir/blueprint/blob/master/PATENTS

@import "../../common/variables";
@import "../button/common";

/*
Control groups

A `.pt-control-group` renders several distinct controls as one unit, squaring the borders between
them. It supports any number of `.pt-button`, `.pt-input`, `.pt-input-group`, and `.pt-select`
elements as direct children.

Note that `.pt-control-group` does not cascade any modifiers to its children. For example, each
child must be marked individually as `.pt-large` for uniform large appearance.

<div class="pt-callout pt-intent-success pt-icon-comparison">
  <h5>Control group vs. input group</h5>
  <p>Both components group multiple elements into a single unit, but their usage patterns are
  different.</p>
  <p>Think of `.pt-control-group` as a parent with multiple children, each of them a
  "control."</p>
  <p>Conversely, a `.pt-input-group` is a single control, and should function like so. A
  button inside of an input group should only affect that input; if its reach is further, then it
  should be promoted to live in a control group.</p>
</div>

Markup:
<div class="pt-control-group-example">
  <div class="pt-control-group">
    <input type="text" class="pt-input" placeholder="I am a text input..." disabled />
    <input type="text" class="pt-input" placeholder="I am a text input..." />
  </div>
  <div class="pt-control-group">
    <input type="text" class="pt-input" placeholder="I am a text input..." />
    <button class="pt-button" disabled>Button</button>
  </div>
  <div class="pt-control-group">
    <button class="pt-button" disabled>Button</button>
    <button class="pt-button">Button</button>
  </div>
  <div class="pt-control-group">
    <button class="pt-button">Button</button>
    <button class="pt-button">Button</button>
  </div>
  <div class="pt-control-group">
    <button class="pt-button">Button</button>
    <input type="text" class="pt-input pt-intent-success" placeholder="I am a text input..." />
  </div>
  <div class="pt-control-group">
    <input type="text" class="pt-input pt-intent-warning" placeholder="I am a text input..." />
    <button class="pt-button pt-intent-success" disabled>Button</button>
  </div>
  <div class="pt-control-group">
    <button class="pt-button pt-intent-warning" disabled>Button</button>
    <button class="pt-button pt-intent-success">Button</button>
  </div>
  <div class="pt-control-group">
    <button class="pt-button pt-intent-warning">Button</button>
    <button class="pt-button pt-intent-success">Button</button>
  </div>
  <div class="pt-control-group">
    <button class="pt-button pt-intent-warning">Button</button>
    <input type="text" class="pt-input pt-intent-success" placeholder="I am a text input..." />
  </div>
  <div class="pt-control-group">
    <div class="pt-input-group">
      <span class="pt-icon pt-icon-people"></span>
      <input type="text" class="pt-input pt-intent-success" placeholder="I am a text input..." style="padding-right:94px" />
      <div class="pt-input-action">
        <button class="pt-button pt-minimal pt-intent-primary">
          can view<span class="pt-icon-standard pt-icon-caret-down pt-align-right"></span>
        </button>
      </div>
    </div>
    <button class="pt-button pt-intent-warning">Button</button>
    <button class="pt-button pt-intent-success">Button</button>
    <button class="pt-button">Button</button>
  </div>
  <div class="pt-control-group">
    <div class="pt-input-group">
      <span class="pt-icon pt-icon-people"></span>
      <input type="text" class="pt-input pt-intent-success" placeholder="I am a text input..." style="padding-right:94px" />
      <div class="pt-input-action">
        <button class="pt-button pt-minimal pt-intent-primary">
          can view<span class="pt-icon-standard pt-icon-caret-down pt-align-right"></span>
        </button>
      </div>
    </div>
    <div class="pt-button-group">
      <button class="pt-button pt-intent-warning">Button</button>
      <button class="pt-button pt-intent-success">Button</button>
      <button class="pt-button">Button</button>
    </div>
  </div>
</div>

Weight: 4

Styleguide components.forms.control-group
*/

//
// for best visual results, button group elements should be stacked in the
// following order to ensure sharp edges in all cases and states:
//
//   (lowest z-index)
//
//   input fields
//      :disabled
//      normal
//
//   regular buttons / pt-select > select
//     :disabled, .pt-disabled
//     normal
//     :focus
//     :hover
//     :active, .pt-active
//
//   pt-input intent
//
//   intent buttons (selects can't be intented yet, but if they could be, they'd be here too)
//     :disabled, .pt-disabled
//     normal
//     :focus
//     :hover
//     :active, .pt-active
//
//   input fields (NOT readonly, disabled, pt-disabled)
//      :focus
//
//   intent input fields (NOT readonly, disabled, pt-disabled)
//      :focus
//
//   input-group children
//
//   .pt-select::after (the caret)
//
//   (highest z-index)

$control-group-z-index-input-disabled: 1;
$control-group-z-index-input-default: 2;

$control-group-z-index-button-disabled: 3;
$control-group-z-index-button-default: 4;
$control-group-z-index-button-focus: 5;
$control-group-z-index-button-hover: 6;
$control-group-z-index-button-active: 7;

$control-group-z-index-intent-input-default: 8;

$control-group-z-index-intent-button-disabled: 9;
$control-group-z-index-intent-button-default: 10;
$control-group-z-index-intent-button-focus: 11;
$control-group-z-index-intent-button-hover: 12;
$control-group-z-index-intent-button-active: 13;

$control-group-z-index-input-focus: 14;
$control-group-z-index-dark-theme-intent-input-default: 14;
$control-group-z-index-intent-input-focus: 15;

$control-group-z-index-input-group-children: 16;
$control-group-z-index-select-caret: 17; // TODO: Make this 17 as well?

// it's easier to understand the z-index rules if we define them separately above.
// stylelint-disable no-duplicate-selectors
.pt-control-group {
  display: flex;
  align-items: flex-start;

  // apply these properties to all direct children, too many permutations to enumerate
  // stylelint-disable selector-no-universal
  > * {
    flex: 0 0 auto;
  }

  // similarly to button groups, elements in control groups are stacked
  // in a very particular order for best visual results
  .pt-button,
  .pt-input,
  .pt-select {
    position: relative;
  }

  .pt-input {
    z-index: $control-group-z-index-input-default;
    // inherit radius since it's most likely to be zero
    border-radius: inherit;

    &:focus {
      z-index: $control-group-z-index-input-focus;
      border-radius: $pt-border-radius;
    }

    // define disabled styles last so that they override all others.
    [readonly],
    :disabled,
    .pt-disabled {
      z-index: $control-group-z-index-input-disabled;
      border-radius: 0;
    }

    &[class*="pt-intent"] {
      z-index: $control-group-z-index-intent-input-default;

      .pt-dark & {
        z-index: $control-group-z-index-dark-theme-intent-input-default;
      }

      &:focus {
        z-index: $control-group-z-index-intent-input-focus;
      }
    }
  }

  .pt-button,
  .pt-select select {
    z-index: $control-group-z-index-button-default;
    // inherit radius since it's most likely to be zero
    border-radius: inherit;

    &:focus {
      // establish new stacking context so focus state covers neighbors
      position: relative;
      z-index: $control-group-z-index-button-focus;
    }

    &:hover {
      z-index: $control-group-z-index-button-hover;
    }

    &:active {
      z-index: $control-group-z-index-button-active;
    }

    // define disabled styles last so that they override all others.
    &[readonly],
    &:disabled,
    &.pt-disabled {
      z-index: $control-group-z-index-button-disabled;
    }

    &[class*="pt-intent"] {
      z-index: $control-group-z-index-intent-button-default;

      &:focus {
        z-index: $control-group-z-index-intent-button-focus;
      }

      &:hover {
        z-index: $control-group-z-index-intent-button-hover;
      }

      &:active {
        z-index: $control-group-z-index-intent-button-active;
      }

      // define disabled styles last so that they override all others.
      &[readonly],
      &:disabled,
      &.pt-disabled {
        z-index: $control-group-z-index-intent-button-disabled;
      }
    }
  }

  // input group contents appear above input always
  .pt-input-group > .pt-icon,
  .pt-input-group > .pt-button,
  .pt-input-group > .pt-input-action {
    z-index: $control-group-z-index-input-group-children;
  }

  .pt-select::after {
    z-index: $control-group-z-index-select-caret;
  }

  &:not(.pt-vertical) > * {
    margin-right: -$button-border-width;
  }

  > :first-child {
    border-radius: $pt-border-radius 0 0 $pt-border-radius;
  }

  > :last-child {
    margin-right: 0;
    border-radius: 0 $pt-border-radius $pt-border-radius 0;
  }

  // bring back border radius on these buttons
  .pt-input-group .pt-button {
    border-radius: $pt-border-radius;
  }

  /*
  Vertical control groups

  Add the class `pt-vertical` to create a vertical control group. Controls in a vertical group
  will all have the same width as the widest control.

  Markup:
  <div class="pt-control-group pt-vertical" style="width: 300px;">
    <div class="pt-input-group pt-large">
      <span class="pt-icon pt-icon-person"></span>
      <input type="text" class="pt-input" placeholder="Username" />
    </div>
    <div class="pt-input-group pt-large">
      <span class="pt-icon pt-icon-lock"></span>
      <input type="password" class="pt-input" placeholder="Password" />
    </div>
    <button class="pt-button pt-large pt-intent-primary">Login</button>
  </div>

  Styleguide components.forms.control-group.vertical
  */

  &.pt-vertical {
    flex-direction: column;

    > * {
      margin-top: -$button-border-width;
      width: 100%;
    }

    > :first-child {
      margin-top: 0;
      border-radius: $pt-border-radius $pt-border-radius 0 0;
    }

    > :last-child {
      border-radius: 0 0 $pt-border-radius $pt-border-radius;
    }
  }
}
